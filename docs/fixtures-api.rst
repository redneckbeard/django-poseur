=====================
The ``FakeModel`` API
=====================

Poseur generates data using ``FakeModel`` subclasses (``from poseur.fixtures import FakeModel``) that declare an inner ``Meta`` class that connects the sublass to a Django model and optionally declare field attributes that act as templates for mapping data to the model's fields. 

Field options
=============

Default behavior
----------------

Poseur defines ``FakeField`` subclasses for nearly all Django's built-in model fields.  (Currently absent are ``FilePathField``, ``FileField`` and ``ImageField``, ``ManyToManyField``, and ``XMLField``.)  These classes have 1-to-1 name mappings with their model field counterparts.  When poseur encounters a model field, it checks ``poseur.fixtures.fields`` for a class with a matching name.  Failing this, it calls ``get_internal_type`` on the model field and again checks for a match. If there is no match, it will raise a ``FakeFieldNotFound`` error.

Providing (more) specific values
--------------------------------

To provide a non-random or less random value for a field, declare that field's name as an attribute on the ``FakeModel`` subclass.  The value of that attribute may be any of the following:

``str`` or ``unicode`` value
    The value will be used for each instance generated for the model concerned.
list
    An element will be randomly selected from the list for each instance generated.
2-tuple
    The first and second member of the tuple will be treated as lower and upper bounds for the range in which the randomly generated value must fall.  This applies to ``DateField``, ``DateTimeField``, ``TimeField``, ``IntegerField``, ``PositiveIntegerField``, ``SmallIntegerField``, ``PositiveSmallIntegerField``, ``BigIntegerField``, ``FloatField``, and ``DecimalField``.  If a tuple is given for any other field type, it will simply be ignore and poseur will fall back to the default behavior.
callable
    The callable will be called for instance generated.  The functions exposed by ``faker`` are particularly useful here.
dictionary (``ForeignKey`` fields only)
    The dictionary will be passed as keyword arguments to the ``filter`` method on the model's default manager.  If there is more than one object in the queryset, one will be selected at random.
``FakeField`` subclass
    You can write your own ``FakeField``\ s if the default behavior or the options above do not meet your needs.

``Meta`` options
================

Required attributes
-------------------

``model``
    The model class that you want to generate data for with this ``FakeModel`` subclass.
``count``
    The number of instances to generated by default.

Optional attributes
-------------------

``requires``
    A list of tuples of other ``FakeModel`` subclasses that need to be generated first.  Currently these must be actual classes and not import paths.

.. note::

   This is obeyed only by ``poseur.fixtures.load_fixtures``.  Poseur assumes that if you are calling ``generate`` on a ``FakeModel`` subclass, then you have opted to do things manually.


Methods
=======

.. classmethod:: generate([count=None])

    Generates *count* instances of the model.  If no arguments are provided, defaults to the ``count`` attribute of the inner ``Meta`` class.


